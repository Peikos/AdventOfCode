module Main where

import Data.List
import Data.Maybe

data Move = U | D | L | R
  deriving (Read, Show)

type Coord = (Int, Int)
type Keys = Coord -> Maybe String
type KeyMap = (Coord, Keys)

square :: KeyMap
square = ((1,1), \a -> elemIndex a [(x,y) | y <- [0..2], x <- [0..2]] >>= Just . show . (+1))

diamond :: KeyMap
diamond = ((0,2), \a -> elemIndex a [(0,0), (2,0), (1,1), (2,1), (3,1), (0,2), (1,2), (2,2), (3,2), (4,2), (1,3), (2,3), (3,3), (2,4)] >>= label)
  where label 10 = Just "A"
        label 11 = Just "B"
        label 12 = Just "C"
        label 13 = Just "D"
        label i | i > 0 && i < 10 = Just $ show i
                | otherwise       = Nothing

button :: Keys -> Coord -> [Move] -> Coord
button _ (x,y) []     = (x,y)
button k (x,y) (U:ds) = let n = (x,y-1)
                        in button k (if isJust (k n) then n else (x,y)) ds
button k (x,y) (D:ds) = let n = (x,y+1)
                        in button k (if isJust (k n) then n else (x,y)) ds
button k (x,y) (L:ds) = let n = (x-1,y)
                        in button k (if isJust (k n) then n else (x,y)) ds
button k (x,y) (R:ds) = let n = (x+1,y)
                        in button k (if isJust (k n) then n else (x,y)) ds

buttons :: KeyMap -> [[Move]] -> [Coord]
buttons (s,_) []     = [s]
buttons k     (m:ms) = button (snd k) (head $ (buttons k) ms) m : buttons k ms

keys k = concat . catMaybes . map (snd k) . tail . reverse . (buttons k) . reverse

main = do
  putStrLn $ keys square testInput
  putStrLn $ keys diamond testInput
  putStrLn $ keys square input
  putStrLn $ keys diamond input

input :: [[Move]]
input = map (map read . map (:[]))
  [ "UUURRRRULRDLRDRRDURDDDLLDLLLULDUDDLDLULUURULRLDLRRLLLRRDRRLDDLLULUDUDDLRDRDUURDLURUURLRULLDDURULRRURDUURLULUUUURDDDDUUDLULRULLLRLLRRRURDLLRLLRRRUURULRDRUUDDDDDLLLRURRURRUURDUURDDRDLULRRLLLDRRRLURRLLURLDRRDDLDLRRLLRDRLLLLDLULDLRRDRRLDDURLULLUDLUDRRDRRLRLULURDRLRLUUUDLRLDLLLURDUDULULDDRUUURLLLDLLDDUDDRURURUDDLUULRDRRRRLDRDDURLUDURDULLDLUDLULDRLRLLRLLLLRURDURLLDRRDRLRUUUUULLLRUDURUDLLLUDLLLLRDLDRDUDRURLUDDUDDURLUUUUDDLLUDLULLLLLDUDLLRLRRDDDULULRLDRLLULDLUDLLURULRDDUURULRDLDLDLRL"
  , "URUUURDULUDLUUUUDDRRRDRRRLDUDLRDRRDRDDLRUULDLLDUDULLLRLDRDRRLDLDLUUDRUULDUDULDUDURURDDURULDLURULRLULDUDDUULDLLLDDURDDRDDURUULUUDRLDDULDRRRRDURRUDLLLURDDDLRULLRDDRDDDDLUUDRDUULRRRRURULDDDLDDRDRRUDRRURUDRDDLDRRRLLURURUULUUDRDULLDRLRDRRDDURDUDLDRLUDRURDURURULDUUURDUULRRRRRUDLLULDDDRLULDDULUDRRRDDRUDRRDLDLRUULLLLRRDRRLUDRUULRDUDRDRRRDDRLLRUUDRLLLUDUDLULUUDULDRRRRDDRURULDULLURDLLLDUUDLLUDRLDURRRLDDDURUDUDURRULDD"
  , "LRUDDULLLULRLUDUDUDRLLUUUULLUDLUUUUDULLUURDLLRDUDLRUDRUDDURURRURUDLLLRLDLUDRRRRRRDLUURLRDDDULRRUDRULRDRDDUULRDDLDULDRRRDDLURRURLLLRURDULLRUUUDDUDUURLRLDDUURLRDRRLURLDRLLUUURDRUUDUUUDRLURUUUDLDRRLRLLRRUURULLLRLLDLLLDULDDLDULDLDDRUDURDDURDUDURDLLLRRDDLULLLUDURLUDDLDLUUDRDRUDUUDLLDDLLLLDRDULRDLDULLRUDDUULDUDLDDDRUURLDRRLURRDDRUUDRUDLLDLULLULUDUDURDDRLRDLRLDRLDDRULLLRUDULDRLRLRULLRLLRRRLLRRRDDRULRUURRLLLRULDLUDRRDDLLLUDDUDDDLURLUDRDLURUUDLLDLULURRLLDURUDDDDRLULRDDLRLDDLRLLDDRRLRDUDUUULRRLRULUDURDUDRLRLRUDUDLLRRRRLRRUDUL"
  , "RULLLLUUUDLLDLLRULLRURRULDDRDLUULDRLLRUDLLRRLRDURLLDUUUUURUUURDLUURRLDDDLRRRRLRULDUDDLURDRRUUDLRRRDLDDUDUDDRUDURURLDULLDLULDLLUDLULRDRLLURRLLDURLDLRDLULUDDULDLDDDDDUURRDRURLDLDULLURDLLDDLLUDLDLDRLRLDLRDRLDLRRUUDRURLUUUDLURUULDUDRDULLDURUDLUUURRRLLDUDUDDUUULLLRUULDLURUDDRLUDRDDLDLLUDUDRRRDDUUULUULLLRLLUURDUUDRUUULULLDLDRUUDURLLUULRLDLUURLLUUDRURDDRLURULDUDUUDRRUUURDULRLDUUDDRURURDRRULDDDRLUDLLUUDURRRLDLRLRDRURLURLLLRLDDLRRLDLDDURDUUDRDRRLDRLULDRLURUUUDDRLLLDDLDURLLLLDRDLDRRUDULURRLULRDRLLUULLRLRDRLLULUURRUDRUDDDLLDURURLURRRDLLDRDLUDRULULULRLDLRRRUUDLULDURLRDRLULRUUURRDDLRUURUDRURUDURURDD"
  , "DURRDLLLDDLLDLLRLULULLRDLDRRDDRDLRULURRDUUDDRLLDDLDRRLRDUDRULDLRURDUUDRDDLLDRRDRUDUDULLDDDDLDRRRLRLRDRDLURRDDLDDDUUDRDRLLLDLUDDDLUULRDRLLLRLLUULUDDDRLDUUUURULRDDURRDRLUURLUDRLRLLLDDLRDDUULRRRRURDLDDDRLDLDRRLLDRDDUDDUURDLDUUDRDLDLDDULULUDDLRDDRLRLDDLUDLLDRLUDUDDRULLRLDLLRULRUURDDRDRDRURDRRLRDLLUDDRRDRRLDDULLLDLUDRRUDLDULDRURRDURLURRLDLRDLRUDLULUDDRULRLLDUURULURULURRLURRUULRULRRRLRDLULRLRLUDURDDRUUURDRLLRRRDDLDRRRULLDLRDRULDRRLRRDLUDDRDDDUUURRLULLDRRUULULLRRRRLDDRDDLUURLLUDLLDUDLULUULUDLLUUURRRUDDDRLLLRDRUUDUUURDRULURRLRDLLUURLRDURULDRRUDURRDDLDRLDRUUDRLLUDLRRU"
  ]

testInput :: [[Move]]
testInput = [[U,L,L],[R,R,D,D,D],[L,U,R,D,L],[U,U,U,U,D]]

{-
sbutton :: (Int, Int) -> [Move] -> (Int, Int)
sbutton (x,y) []     = (x,y)
sbutton (x,y) (U:ds) = sbutton (x,max (y-1) 0) ds
sbutton (x,y) (D:ds) = sbutton (x,min (y+1) 2) ds
sbutton (x,y) (L:ds) = sbutton (max (x-1) 0,y) ds
sbutton (x,y) (R:ds) = sbutton (min (x+1) 2,y) ds

skey :: (Int, Int) -> Int
skey (x, y) = 1 + x + 3 * y

sbuttons :: [[Move]] -> [(Int,Int)]
sbuttons [] = [(1,1)]
sbuttons (m:ms) = sbutton (head $ sbuttons ms) m : sbuttons ms

skeys = map skey . tail . reverse . sbuttons . reverse -}
